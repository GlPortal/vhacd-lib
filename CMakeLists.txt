project(VHACD_LIB CXX C)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")

if (NOT NO_OPENCL)
	find_package(OpenCL REQUIRED)
endif()
if (NOT NO_OPENMP)
	find_package(OpenMP REQUIRED)
endif()
if(OPENMP_FOUND)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
endif()

file(GLOB PROJECT_INC_FILES "inc/*.h" "public/*.h")
file(GLOB PROJECT_INL_FILES "inc/*.inl")
file(GLOB PROJECT_CPP_FILES "src/*.cpp")
file(GLOB PROJECT_C_FILES "src/*.c")
file(GLOB PROJECT_CL_FILES "cl/*.cl")
source_group (Inc FILES ${PROJECT_INC_FILES})
source_group (Inl FILES ${PROJECT_INL_FILES})
source_group (Src FILES ${PROJECT_CPP_FILES}  )
source_group (SrcC FILES ${PROJECT_C_FILES}  )
source_group (CL FILES ${PROJECT_CL_FILES})

include_directories(BEFORE ${CMAKE_CURRENT_SOURCE_DIR}/inc)

set(LIB_TYPE "STATIC" CACHE STRING "STATIC, SHARED or MODULE?")
message("[VHACD] \t LIB_TYPE " ${LIB_TYPE})
add_library(VHACD_LIB ${LIB_TYPE} ${PROJECT_CPP_FILES} ${PROJECT_C_FILES} ${PROJECT_INC_FILES} ${PROJECT_INL_FILES} ${PROJECT_CL_FILES})

if (OpenCL_FOUND)
    include_directories("${OpenCL_INCLUDE_DIRS}")
    add_definitions( -DOPENCL_FOUND=1 )
    add_definitions( -DOPENCL_CL_FILES="${PROJECT_CL_FILES}" )
endif()

message("[VHACD] \t -> CMAKE_INSTALL_PREFIX " ${CMAKE_INSTALL_PREFIX})
install(TARGETS VHACD_LIB DESTINATION bin)
install(FILES ${PROJECT_INC_FILES} DESTINATION include)
install(FILES ${PROJECT_INL_FILES} DESTINATION include)

